/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */
 
 //COMPILE ERROR  
 struct ListNode* mergeTwoLists(struct ListNode* l1, struct ListNode* l2) {
    struct ListNode* head;
    struct ListNode* p,q;
    q=(struct ListNode)malloc(sizeof(struct ListNode));
    head=(struct ListNode)malloc(sizeof(struct ListNode));
   q->next=NULL;
    head->next=NULL;
    p=head;
   
    
    while(l1!=NULL||l2!=NULL)
    {
        if(l1==NULL)
        {
            p->next=l2;
            break;
        }
        if(l2==NULL)
        {
            p->next=l1;
            break;
        }
        
        if(l1->val<l2->val)
        {
            q->val=l1->val;
            l1=l1->next;
            p->next=q;
            p=q;
        }
        else
        {
            q->val=l2->val;
            l2=l2->next;
            p->next=q;
            p=q;
        }
    }
    p->next=NULL;
    return head->next;
}

AC answer
struct ListNode* mergeTwoLists(struct ListNode* l1, struct ListNode* l2)
{
struct ListNode* l3,*p,q,head;
head=(struct ListNode)malloc(sizeof(struct ListNode));
head->next=NULL;
p=head;
while(l1!=NULL||l2!=NULL)
{
if(l1==NULL)
{
p->next=l2;
break;
}
if(l2==NULL)
{
p->next=l1;
break;
}
q=(struct ListNode)malloc(sizeof(struct ListNode));
q->next=NULL;
if(l1->val<l2->val)
{
q->val=l1->val;
l1=l1->next;
}
else
{
q->val=l2->val;
l2=l2->next;
}
p->next=q;
p=q;

}
return head->next;
}
