/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */
 
 wrong answer
struct ListNode* mergeTwoLists(struct ListNode* l1, struct ListNode* l2) {
    if(l1==NULL)
        return l2;
    if(l2==NULL)
        return l2;
    
    int tempval;
    struct ListNode *p=l1;
    struct ListNode *q=l2;
    struct ListNode *temp;
    if(l1->val<=l2->val)
    {
        l1->next=NULL;
        p=p->next;
    }
    else{tempval=l1->val;
         l1->val=l2->val;
         l2->val=tempval;
        l1->next=NULL;
         p=p->next;
    }
    
    while(p!=NULL&&q!=NULL)
    {
        if(p->val<=q->val)
        {
            temp=p->next;
            p->next=NULL;
            l1->next=p;
            l1=p;
            p=temp;
        }
        else{
            temp=q->next;
            q->next=NULL;
            l1->next=q;
            l1=q;
            q=temp;
        }
        
    }
    
    if(p==NULL)
    {
        l1->next=q;
    }
    
    if(q==NULL)
        l1->next=p;
    
    return l1;
    
}

AC answer
struct ListNode* mergeTwoLists(struct ListNode* l1, struct ListNode* l2)
{
struct ListNode* l3,*p,q,head;
head=(struct ListNode)malloc(sizeof(struct ListNode));
head->next=NULL;
p=head;
while(l1!=NULL||l2!=NULL)
{
if(l1==NULL)
{
p->next=l2;
break;
}
if(l2==NULL)
{
p->next=l1;
break;
}
q=(struct ListNode)malloc(sizeof(struct ListNode));
q->next=NULL;
if(l1->val<l2->val)
{
q->val=l1->val;
l1=l1->next;
}
else
{
q->val=l2->val;
l2=l2->next;
}
p->next=q;
p=q;

}
return head->next;
}
