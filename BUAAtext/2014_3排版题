输入若干行字符，表示某电影的演职员表，每行只有一个冒号，冒号前面是职位，冒号后面是姓名，要求把各行冒号对齐，删除多余空格后输出。先输入一个数字，表示排版
要求的冒号位置，该位置号保证比各行冒号前的最大字符数还要大。再输入若干行字符，最多50行，每行最多100个字符，除空格、制表符和回车之外都是有效字符，要求每
行的冒号处于格式要求的位置，冒号两边与有效单词之间各有一个空格，冒号前面的单词之间只有一个空格（删除多余的空格和制表符），在冒号左边右对齐，前面全由
空格填充，冒号后面的单词之间也只有一个空格，在冒号右边左对齐，最后一个单词后不加空格直接换行。

#include<stdio.h>
#include<string.h>
#include<stdlib.h>

#define M 50
#define N 100

int main()
{//scanf输入后回车符进入缓冲区，用getchar()缓冲掉
    int po;
    scanf("%d",&po);
    getchar();
//定义二维数组来存放输入的语句
    char s[M][N];
//用gets()来输入每行语句，当下一行为空行时，跳出循环
    int p=0;
    while(p<M)
    {
        gets(s[p]);
        p++;
        if(s[p-1][0]=='\0') break;
    }
//除去空白行进行循环遍历
    for(int i=0;i<p-1;i++)
    {
        int mao=0,j=0;
        int len=strlen(s[i]);//算上了'\0'
//每一句定位：所在位置，记录mao

        while(j<len)
        {
            if(s[i][j]==':')
            {   mao=j;
                break;
            }
            j++;
        }
//向系统申请两个一维数组的内存，这里注意不要越界，不要越界！！！！！！！
        char *job=NULL;
        job=(char*) malloc((mao+1)*sizeof(char));
        char *name=NULL;
        name=(char*) malloc((len-mao)*sizeof(char));    
//在把职位赋值的时候需要在赋值完成之后加上'\0'符号，否则会出现连续的空白符
        for(j=0;j<mao;j++)
        {
            job[j]=s[i][j];
        }
        job[j]='\0';
//将姓名赋值给name数组，因为末尾有换行符，可直接到=len
        int k;
        for(k=0,j=mao+1;j<=len;j++,k++)
        {
            name[k]=s[i][j];
        }
//按照题目格式，在规定位置为冒号，然后前面的职位右对齐，域宽为冒号位置减一，空白格填充，姓名则左对齐，直接换行
        printf("%*s : %-s\n",po,job,name);
//记得释放掉你申请的内存
        free(job);
        free(name);

    }
    return 0;
}
